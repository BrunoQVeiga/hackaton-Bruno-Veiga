import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder

# Configurar a p√°gina do Streamlit
st.set_page_config(
    page_title="Correla√ß√£o",
    page_icon="üìà",
)

# Fun√ß√£o principal para a terceira p√°gina do Streamlit
def run():
    st.write("# An√°lise de Fatores Hist√≥ricos que Influenciam o IPV üìä")

    st.sidebar.success("Selecione uma demonstra√ß√£o acima. üöÄ")

    st.markdown(
        '''
        Nesta p√°gina, vamos explorar os fatores hist√≥ricos que influenciam o **Ponto de Virada (IPV)** dos alunos. üìà
        Vamos visualizar a correla√ß√£o entre diversas vari√°veis ao longo dos anos e como elas impactam o IPV. üí°
        
        ### An√°lise de Correla√ß√£o
        A matriz de correla√ß√£o a seguir mostra a rela√ß√£o entre diferentes vari√°veis e o IPV:
        '''
    )

    # Carregar o dataset final merged
    df = pd.read_csv('PEDE_PASSOS_DATASET_FIAP.csv', delimiter=';')

    # Converter colunas relevantes para num√©rico, tratando valores de string
    label_encoders = {}
    for column in df.columns:
        if df[column].dtype == 'object':
            label_encoders[column] = LabelEncoder()
            df[column] = label_encoders[column].fit_transform(df[column])
        else:
            df[column] = pd.to_numeric(df[column], errors='coerce')

    # Listas de colunas para an√°lise
    performance_columns = ['INDE_2020', 'PEDRA_2020', 'IAA_2020', 'IEG_2020', 'IPS_2020', 'IDA_2020', 'IPP_2020', 'IPV_2020', 'IAN_2020', 
                           'PEDRA_2021', 'INDE_2021', 'IAA_2021', 'IEG_2021', 'IPS_2021', 'IDA_2021', 'IPP_2021', 'IPV_2021', 'IAN_2021']

    # Verificar a presen√ßa de IPV_2022 e outras colunas nas listas
    df['IPV_2022'] = pd.to_numeric(df['IPV_2022'], errors='coerce')
    df['INDE_2022'] = pd.to_numeric(df['INDE_2022'], errors='coerce')

    # Calcular correla√ß√µes de performance anterior
    performance_corr_matrix = df[performance_columns + ['IPV_2022']].corr()
    performance_corr_with_ipv_2022 = performance_corr_matrix['IPV_2022'].drop('IPV_2022', errors='ignore').abs()
    top3_performance_corr = performance_corr_with_ipv_2022.sort_values(ascending=False).head(3)

    # Plotar a matriz de correla√ß√£o de performance anterior
    st.markdown("### Matriz de Correla√ß√£o de Performance Anterior")
    plt.figure(figsize=(15, 10))
    sns.heatmap(performance_corr_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1)
    plt.title('Matriz de Correla√ß√£o de Performance Anterior com IPV_2022')
    st.pyplot(plt)

    st.write("Top 3 correla√ß√µes de performance anterior com IPV_2022:", top3_performance_corr)

    # Calcular correla√ß√µes de INDE_2022
    inde_corr_matrix = df[performance_columns + ['INDE_2022']].corr()
    inde_corr_with_inde_2022 = inde_corr_matrix['INDE_2022'].drop('INDE_2022', errors='ignore').abs()
    top3_inde_corr = inde_corr_with_inde_2022.sort_values(ascending=False).head(3)

    # Calcular correla√ß√µes de PEDRA_2022
    pedra_corr_matrix = df[performance_columns + ['PEDRA_2022']].corr()
    pedra_corr_with_pedra_2022 = pedra_corr_matrix['PEDRA_2022'].drop('PEDRA_2022', errors='ignore').abs()
    top3_pedra_corr = pedra_corr_with_pedra_2022.sort_values(ascending=False).head(3)

    # Calcular correla√ß√µes de PONTO_VIRADA_2022
    ponto_virada_corr_matrix = df[performance_columns + ['PONTO_VIRADA_2022']].corr()
    ponto_virada_corr_with_ponto_virada_2022 = ponto_virada_corr_matrix['PONTO_VIRADA_2022'].drop('PONTO_VIRADA_2022', errors='ignore').abs()
    top3_ponto_virada_corr = ponto_virada_corr_with_ponto_virada_2022.sort_values(ascending=False).head(3)

    # Plotar a matriz de correla√ß√£o de INDE_2022
    st.markdown("### Matriz de Correla√ß√£o de INDE_2022")
    plt.figure(figsize=(15, 10))
    sns.heatmap(inde_corr_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1)
    plt.title('Matriz de Correla√ß√£o de INDE_2022')
    st.pyplot(plt)

    st.write("Top 3 correla√ß√µes de INDE_2022:", top3_inde_corr)

    # Plotar a matriz de correla√ß√£o de PEDRA_2022
    st.markdown("### Matriz de Correla√ß√£o de PEDRA_2022")
    plt.figure(figsize=(15, 10))
    sns.heatmap(pedra_corr_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1)
    plt.title('Matriz de Correla√ß√£o de PEDRA_2022')
    st.pyplot(plt)

    st.write("Top 3 correla√ß√µes de PEDRA_2022:", top3_pedra_corr)

    # Plotar a matriz de correla√ß√£o de PONTO_VIRADA_2022
    st.markdown("### Matriz de Correla√ß√£o de PONTO_VIRADA_2022")
    plt.figure(figsize=(15, 10))
    sns.heatmap(ponto_virada_corr_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1)
    plt.title('Matriz de Correla√ß√£o de PONTO_VIRADA_2022')
    st.pyplot(plt)

    st.write("Top 3 correla√ß√µes de PONTO_VIRADA_2022:", top3_ponto_virada_corr)

    # Adicionar uma se√ß√£o de conclus√£o
    st.markdown("## Conclus√£o")

    st.markdown(
        '''
        Com base na an√°lise de correla√ß√£o realizada, podemos observar que algumas avalia√ß√µes passadas est√£o fortemente correlacionadas com as avalia√ß√µes futuras. 
        Em particular, os ind√≠ces de desempenho dos anos anteriores, mostram uma correla√ß√£o significativa com os resultados de 2022.
        
        ### Implica√ß√µes para Modelagem Preditiva

        - **Potencial de Predi√ß√£o**: As altas correla√ß√µes observadas indicam que essas vari√°veis hist√≥ricas podem ser excelentes preditores para modelos de previs√£o de desempenho futuro dos alunos.
        - **Modelos de Machine Learning**: Podemos utilizar essas vari√°veis como features em modelos de aprendizado de m√°quina, como regress√µes, √°rvores de decis√£o e redes neurais, para prever o desempenho futuro.
        - **Interven√ß√µes Educacionais**: As correla√ß√µes podem tamb√©m guiar interven√ß√µes educacionais, ajudando a identificar √°reas onde os alunos podem precisar de mais apoio.

        Em suma, compreender como as avalia√ß√µes passadas influenciam as futuras nos fornece uma base s√≥lida para desenvolver estrat√©gias de ensino mais eficazes e modelos preditivos robustos.
        '''
    )

if __name__ == "__main__":
    run()

